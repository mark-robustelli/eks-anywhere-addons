---
# Source namespace where you store the authoritative Secret
apiVersion: v1
kind: Namespace
metadata:
  name: source-secrets
---
# Authoritative source Secret (edit values here or create out-of-band)
apiVersion: v1
kind: Secret
metadata:
  name: fa-source-secrets
  namespace: source-secrets
type: Opaque
stringData:
  FA-root-db-username: "postgres"
  FA-root-db-password: "changeMeSuperSecret"
  FA-api-key: "something-long-to-change-later"
---
# Allow ESO to read Secrets in source-secrets
apiVersion: v1
kind: ServiceAccount
metadata:
  name: eso-k8s-reader
  namespace: source-secrets
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: read-secrets
  namespace: source-secrets
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get","list","watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: eso-k8s-reader-binding
  namespace: source-secrets
subjects:
  - kind: ServiceAccount
    name: eso-k8s-reader
    namespace: source-secrets
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: read-secrets
---
# Namespaced SecretStore using the Kubernetes provider (points to source-secrets)
apiVersion: external-secrets.io/v1
kind: SecretStore
metadata:
  name: k8s-source
  namespace: fusionauth
spec:
  provider:
    kubernetes:
      remoteNamespace: source-secrets
      server:
        url: https://kubernetes.default.svc
        caProvider:
          type: ConfigMap
          name: kube-root-ca.crt
          key: ca.crt
      auth:
        serviceAccount:
          name: eso-k8s-reader
          namespace: source-secrets
---